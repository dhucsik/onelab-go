// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	logging "practice/logging"
	models "practice/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepository) Create(ctx context.Context, user *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), ctx, user)
}

// GetByUsername mocks base method.
func (m *MockIUserRepository) GetByUsername(ctx context.Context, username string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockIUserRepositoryMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockIUserRepository)(nil).GetByUsername), ctx, username)
}

// GetUsersWithBooks mocks base method.
func (m *MockIUserRepository) GetUsersWithBooks(ctx context.Context) ([]models.UserBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithBooks", ctx)
	ret0, _ := ret[0].([]models.UserBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithBooks indicates an expected call of GetUsersWithBooks.
func (mr *MockIUserRepositoryMockRecorder) GetUsersWithBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithBooks", reflect.TypeOf((*MockIUserRepository)(nil).GetUsersWithBooks), ctx)
}

// GetUsersWithBooksForMonth mocks base method.
func (m *MockIUserRepository) GetUsersWithBooksForMonth(ctx context.Context) ([]models.UserBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithBooksForMonth", ctx)
	ret0, _ := ret[0].([]models.UserBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithBooksForMonth indicates an expected call of GetUsersWithBooksForMonth.
func (mr *MockIUserRepositoryMockRecorder) GetUsersWithBooksForMonth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithBooksForMonth", reflect.TypeOf((*MockIUserRepository)(nil).GetUsersWithBooksForMonth), ctx)
}

// UpdatePassword mocks base method.
func (m *MockIUserRepository) UpdatePassword(ctx context.Context, ID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, ID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserRepositoryMockRecorder) UpdatePassword(ctx, ID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserRepository)(nil).UpdatePassword), ctx, ID, password)
}

// MockIBookRepository is a mock of IBookRepository interface.
type MockIBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepositoryMockRecorder
}

// MockIBookRepositoryMockRecorder is the mock recorder for MockIBookRepository.
type MockIBookRepositoryMockRecorder struct {
	mock *MockIBookRepository
}

// NewMockIBookRepository creates a new mock instance.
func NewMockIBookRepository(ctrl *gomock.Controller) *MockIBookRepository {
	mock := &MockIBookRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepository) EXPECT() *MockIBookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBookRepository) Create(ctx context.Context, book *models.Book, logger *logging.Logger) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, book, logger)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBookRepositoryMockRecorder) Create(ctx, book, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBookRepository)(nil).Create), ctx, book, logger)
}

// Delete mocks base method.
func (m *MockIBookRepository) Delete(ctx context.Context, ID string, logger *logging.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ID, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBookRepositoryMockRecorder) Delete(ctx, ID, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBookRepository)(nil).Delete), ctx, ID, logger)
}

// Get mocks base method.
func (m *MockIBookRepository) Get(ctx context.Context, ID string, logger *logging.Logger) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID, logger)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBookRepositoryMockRecorder) Get(ctx, ID, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBookRepository)(nil).Get), ctx, ID, logger)
}

// GetBooksUsersIncome mocks base method.
func (m *MockIBookRepository) GetBooksUsersIncome(ctx context.Context, logger *logging.Logger) ([]models.BookUserIncome, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksUsersIncome", ctx, logger)
	ret0, _ := ret[0].([]models.BookUserIncome)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksUsersIncome indicates an expected call of GetBooksUsersIncome.
func (mr *MockIBookRepositoryMockRecorder) GetBooksUsersIncome(ctx, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksUsersIncome", reflect.TypeOf((*MockIBookRepository)(nil).GetBooksUsersIncome), ctx, logger)
}

// List mocks base method.
func (m *MockIBookRepository) List(ctx context.Context, logger *logging.Logger) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, logger)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIBookRepositoryMockRecorder) List(ctx, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIBookRepository)(nil).List), ctx, logger)
}

// Update mocks base method.
func (m *MockIBookRepository) Update(ctx context.Context, ID string, book *models.Book, logger *logging.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ID, book, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIBookRepositoryMockRecorder) Update(ctx, ID, book, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIBookRepository)(nil).Update), ctx, ID, book, logger)
}

// MockIBookRentRepository is a mock of IBookRentRepository interface.
type MockIBookRentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRentRepositoryMockRecorder
}

// MockIBookRentRepositoryMockRecorder is the mock recorder for MockIBookRentRepository.
type MockIBookRentRepositoryMockRecorder struct {
	mock *MockIBookRentRepository
}

// NewMockIBookRentRepository creates a new mock instance.
func NewMockIBookRentRepository(ctrl *gomock.Controller) *MockIBookRentRepository {
	mock := &MockIBookRentRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRentRepository) EXPECT() *MockIBookRentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBookRentRepository) Create(ctx context.Context, bookRent *models.BookRent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, bookRent)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBookRentRepositoryMockRecorder) Create(ctx, bookRent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBookRentRepository)(nil).Create), ctx, bookRent)
}

// Delete mocks base method.
func (m *MockIBookRentRepository) Delete(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBookRentRepositoryMockRecorder) Delete(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBookRentRepository)(nil).Delete), ctx, ID)
}

// Get mocks base method.
func (m *MockIBookRentRepository) Get(ctx context.Context, ID string) (models.BookRent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID)
	ret0, _ := ret[0].(models.BookRent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBookRentRepositoryMockRecorder) Get(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBookRentRepository)(nil).Get), ctx, ID)
}

// List mocks base method.
func (m *MockIBookRentRepository) List(ctx context.Context) ([]models.BookRent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]models.BookRent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIBookRentRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIBookRentRepository)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockIBookRentRepository) Update(ctx context.Context, ID string, bookRent *models.BookRent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ID, bookRent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIBookRentRepositoryMockRecorder) Update(ctx, ID, bookRent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIBookRentRepository)(nil).Update), ctx, ID, bookRent)
}
