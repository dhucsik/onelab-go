basePath: /api/v1
definitions:
  models.AuthUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Book:
    properties:
      author:
        type: string
      id:
        type: string
      rent_price:
        type: number
      title:
        type: string
    type: object
  models.BookRent:
    properties:
      book_id:
        type: string
      date_rented:
        type: string
      date_returned:
        type: string
      due_date:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  models.BookUserIncome:
    properties:
      author:
        type: string
      id:
        type: string
      title:
        type: string
      total_income:
        type: number
      users:
        items:
          $ref: '#/definitions/models.UserResp'
        type: array
    type: object
  models.UpdatePasswordReq:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      user_role:
        type: string
      username:
        type: string
    type: object
  models.UserBook:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      username:
        type: string
    type: object
  models.UserResp:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8586
info:
  contact:
    email: diasgalikhanov@gmail.com
    name: Dias Galikhanov
  description: Simple microservice for borrowing books with jwt auth
  termsOfService: http://swagger.io/terms/
  title: Book microservice
  version: "1.0"
paths:
  /book:
    get:
      consumes:
      - application/json
      description: list books
      operationId: list-books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: List Books
      tags:
      - book
    post:
      consumes:
      - application/json
      description: create book
      operationId: create-book
      parameters:
      - description: book info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: id
          schema:
            type: string
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Book
      tags:
      - book
  /book-users-income:
    get:
      consumes:
      - application/json
      description: get books that users have and total income for each
      operationId: get-book-users-income
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookUserIncome'
            type: array
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: GetBooksUsersIncome
      tags:
      - book
  /book/{book_id}:
    delete:
      consumes:
      - application/json
      description: delete book by ID
      operationId: delete-book
      parameters:
      - description: book id
        in: path
        name: book_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Book
      tags:
      - book
    get:
      consumes:
      - application/json
      description: get book by ID
      operationId: get-book
      parameters:
      - description: book id
        in: path
        name: book_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: Get Book
      tags:
      - book
    put:
      consumes:
      - application/json
      description: update book
      operationId: update-book
      parameters:
      - description: book id
        in: path
        name: book_id
        required: true
        type: string
      - description: book info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Book
      tags:
      - book
  /rent:
    get:
      consumes:
      - application/json
      description: list book rents
      operationId: list-rents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookRent'
            type: array
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: List Book Rents
      tags:
      - rent
    post:
      consumes:
      - application/json
      description: create book rent
      operationId: create-rent
      parameters:
      - description: rent info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.BookRent'
      produces:
      - application/json
      responses:
        "201":
          description: id
          schema:
            type: string
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Book Rent
      tags:
      - rent
  /rent/{rent_id}:
    delete:
      consumes:
      - application/json
      description: delete book rent by ID
      operationId: delete-rent
      parameters:
      - description: rent id
        in: path
        name: rent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Book Rent
      tags:
      - rent
    get:
      consumes:
      - application/json
      description: get book rent by ID
      operationId: get-rent
      parameters:
      - description: rent id
        in: path
        name: rent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookRent'
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: Get Book Rent
      tags:
      - rent
    put:
      consumes:
      - application/json
      description: update book rent
      operationId: update-rent
      parameters:
      - description: rent id
        in: path
        name: rent_id
        required: true
        type: string
      - description: rent info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.BookRent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Book Rent
      tags:
      - rent
  /sign-in:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.AuthUser'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: SignIn
      tags:
      - auth
  /sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: id
          schema:
            type: string
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: SignUp
      tags:
      - auth
  /update-password:
    post:
      consumes:
      - application/json
      description: update password
      operationId: update-password
      parameters:
      - description: current and new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: UpdatePassword
      tags:
      - auth
  /users-with-books:
    get:
      consumes:
      - application/json
      description: get users with books they borrowed
      operationId: get-users-with-books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserBook'
            type: array
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: GetUsersWithBooks
      tags:
      - user
  /users-with-books-for-month:
    get:
      consumes:
      - application/json
      description: get users with books they borrowed for last month
      operationId: get-users-with-books-for-month
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserBook'
            type: array
        "400":
          description: message
          schema:
            type: string
        "404":
          description: message
          schema:
            type: string
        "500":
          description: message
          schema:
            type: string
        default:
          description: message
          schema:
            type: string
      summary: GetUsersWithBooksForMonth
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
